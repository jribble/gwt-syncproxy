/*
 * Copyright www.gdevelop.com.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.gdevelop.gwt.syncrpc;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;

import java.lang.reflect.Proxy;

import java.net.CookiePolicy;

import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;


/**
 * Sync Proxy for GWT RemoteService
 * Usage:
 * MyServiceInterface myService = newProxyInstance(MyServiceInterface.class,
 *    "http://localhost:8888/myapp/", "myServiceServlet", policyName);
 *  where policyName is the file name (with gwt.rpc extenstion) generated
 *  by GWT RPC backend
 *
 * Or
 * MyServiceInterface myService = newProxyInstance(MyServiceInterface.class,
 *    "http://localhost:8888/myapp/", "myServiceServlet");
 * In this case, the SyncProxy search for the appropriate policyName file in
 * the system classpath
 */
public class SyncProxy {
  private static final String GWT_PRC_POLICY_FILE_EXT = ".gwt.rpc";
  private static final Map<String, String> POLICY_MAP = new HashMap<String, String>();
  static{
    String classPath = System.getProperty("java.class.path");
    StringTokenizer st = new StringTokenizer(classPath, File.pathSeparator);
    while (st.hasMoreTokens()){
      String path = st.nextToken();
      File f = new File(path);
      if (f.isDirectory()){
        searchPolicyFile(path);
      }
      // TODO: Search in jar, zip files
    }
  }
  
  private static final java.net.CookieManager DEFAULT_COOKIE_MANAGER = new java.net.CookieManager(null, CookiePolicy.ACCEPT_ALL);
  
  private static void searchPolicyFile(String path){
    String policyName = null;
    
    File f = new File(path);
    String[] children = f.list(new FilenameFilter(){
      public boolean accept(File dir, String name) {
        if (name.endsWith(GWT_PRC_POLICY_FILE_EXT)){
          return true;
        }
        return false;
      }
    });
    for (String child : children){
      BufferedReader reader;
      try {
        reader = new BufferedReader(new FileReader(new File(path ,child)));
        String line = reader.readLine();
        while (line != null){
          int pos = line.indexOf(", false, false, false, false, _, ");
          if (pos > 0){
            policyName = child.substring(0, child.length() - GWT_PRC_POLICY_FILE_EXT.length());
            POLICY_MAP.put(line.substring(0, pos), policyName);
            POLICY_MAP.put(line.substring(0, pos) + "Async", policyName);
          }
          line = reader.readLine();
        }
      } catch (IOException e) {
        e.printStackTrace();
        // ignore
      }
    }
  }
  
  /**
  * Create a new Proxy for the specified <code>serviceIntf</code>
  * @param serviceIntf The remote service interface
  * @param moduleBaseURL Base URL
  * @param remoteServiceRelativePath The remote service servlet relative path
  * @param policyName Policy name (*.gwt.rpc) generated by GWT RPC backend
  * @param cookieManager Used to perform session management such as login. 
  * @return A new proxy object which implements the service interface serviceIntf
  */
  @SuppressWarnings("unchecked")
  public static Object newProxyInstance(Class serviceIntf, String moduleBaseURL, 
                                        String remoteServiceRelativePath, 
                                        String policyName, 
                                        java.net.CookieManager cookieManager){
    if(cookieManager == null){
      cookieManager = new java.net.CookieManager(null, CookiePolicy.ACCEPT_ALL);
    }

    return Proxy.newProxyInstance(SyncProxy.class.getClassLoader(), 
                new Class[]{serviceIntf}, 
                new RemoteServiceInvocationHandler(moduleBaseURL, 
                                                   remoteServiceRelativePath, 
                                                   policyName, 
                                                   cookieManager));
  }

  /**
   * Create a new Proxy for the specified service interface <code>serviceIntf</code>
   * 
   * @param serviceIntf The remote service interface
   * @param moduleBaseURL Base URL
   * @param remoteServiceRelativePath The remote service servlet relative path
   * @param policyName Policy name (*.gwt.rpc) generated by GWT RPC backend
   * @return A new proxy object which implements the service interface serviceIntf
   */
  @SuppressWarnings("unchecked")
  public static Object newProxyInstance(Class serviceIntf, String moduleBaseURL, 
                                       String remoteServiceRelativePath, 
                                       String policyName){
    return newProxyInstance(serviceIntf, moduleBaseURL, remoteServiceRelativePath, 
                            policyName, DEFAULT_COOKIE_MANAGER);
  }

  /**
  * Create a new Proxy for the specified service interface <code>serviceIntf</code>
  * 
  * @param serviceIntf The remote service interface
  * @param moduleBaseURL Base URL
  * @param remoteServiceRelativePath The remote service servlet relative path
  * @return A new proxy object which implements the service interface serviceIntf
  */
  @SuppressWarnings("unchecked")
  public static Object newProxyInstance(Class serviceIntf, String moduleBaseURL, 
                                       String remoteServiceRelativePath){
    return newProxyInstance(serviceIntf, moduleBaseURL, remoteServiceRelativePath, 
                            POLICY_MAP.get(serviceIntf.getName()), DEFAULT_COOKIE_MANAGER);
  }
  /**
  * Create a new Proxy for the specified service interface <code>serviceIntf</code>
  * 
  * @param serviceIntf The remote service interface
  * @param moduleBaseURL Base URL
  * @param remoteServiceRelativePath The remote service servlet relative path
  * @param cookieManager Used to perform session management such as login. 
  * @return A new proxy object which implements the service interface serviceIntf
  */
  @SuppressWarnings("unchecked")
  public static Object newProxyInstance(Class serviceIntf, String moduleBaseURL, 
                                       String remoteServiceRelativePath, 
                                        java.net.CookieManager cookieManager){
    return newProxyInstance(serviceIntf, moduleBaseURL, remoteServiceRelativePath, 
                            POLICY_MAP.get(serviceIntf.getName()), cookieManager);
  }
}
